{
  "name": "AsyncNinja",
  "tagline": "AsyncNinja:  Simple and Safe Concurrency for Swift",
  "body": "### Provides typesafe, threadsafe, memory leaks safe concurrency primitives for Swift 3.\r\n\r\nIncludes Primitives:\r\n\r\n*    [`Future`](https://github.com/AsyncNinja/AsyncNinja/blob/master/Docs/Future.md) is a proxy of value that will be available at some point in the future. See example for advances of using futures.\r\n*    [`InfiniteChannel`](https://github.com/AsyncNinja/AsyncNinja/blob/master/Docs/InfiniteChannel.md) (renamed from Stream because of some odd naming conflict with standard library) is the same as future but the value will appear multiple times.\r\n*    [`Channel`](https://github.com/AsyncNinja/AsyncNinja/blob/master/Docs/Channel.md) is a combination of `Future` and `InfiniteChannel`.\r\n*    [`Executor`](https://github.com/AsyncNinja/AsyncNinja/blob/master/Docs/Executor.md) is object made to execute escaped block `(Void) -> Void`. Its propose is to encapsulate a way of an execution.\r\n*    [`ExecutionContext`](https://github.com/AsyncNinja/AsyncNinja/blob/master/Docs/ExecutionContext.md) is a protocol concurrency-aware objects must conform to. It basically make them actors or components of actor.\r\n*    [`Fallible`](https://github.com/AsyncNinja/AsyncNinja/blob/master/Docs/Fallible.md) is validation monad. Is an object that represents either success value of failure value (Error).\r\n\r\nSupports: iOS, macOS, watchOS, tvOS and **Linux**.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}